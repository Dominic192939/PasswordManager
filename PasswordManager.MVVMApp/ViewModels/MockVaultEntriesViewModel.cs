namespace PasswordManager.MVVMApp.ViewModels
{
    using CommunityToolkit.Mvvm.Input;
    using System;
    using System.Collections.ObjectModel;

    using System.Windows.Input;

    /// <summary>
    /// Generated by the generator.
    /// </summary>
    public partial class MockVaultEntriesViewModel : ViewModelBase
    {
        public MockVaultEntriesViewModel()
        {
            // Konstruktor: Initialisiere Commands und Sample-Daten
            AddItemCommand = new RelayCommand(AddItem);
            LoadModelsCommand = new RelayCommand(LoadModels);
            EditItemCommand = new RelayCommand(EditItem);
            DeleteItemCommand = new RelayCommand(DeleteItem);  // Füge den DeleteItemCommand hinzu
            Models = new ObservableCollection<MockVaultEntryViewModel>();
        }

        #region Properties

        private string _filter;
        public string Filter
        {
            get { return _filter; }
            set
            {
                _filter = value;
                OnPropertyChanged(); // Notify that the property has changed
            }
        }

        private ObservableCollection<MockVaultEntryViewModel> _models;
        public ObservableCollection<MockVaultEntryViewModel> Models
        {
            get { return _models; }
            set
            {
                _models = value;
                OnPropertyChanged();
            }
        }

        private MockVaultEntryViewModel _selectedItem;
        public MockVaultEntryViewModel SelectedItem
        {
            get { return _selectedItem; }
            set
            {
                _selectedItem = value;
                OnPropertyChanged();
            }
        }

        #endregion

        #region Commands

        public ICommand AddItemCommand { get; }
        public ICommand LoadModelsCommand { get; }
        public ICommand EditItemCommand { get; }
        public ICommand DeleteItemCommand { get; } 
        #endregion

        #region Command Methods

        private void AddItem()
        {
            // Beispiel für das Hinzufügen eines neuen Elements
            Models.Add(new MockVaultEntryViewModel
            {
                Name = "Neuer Eintrag",
                UserName = "Benutzername",
                Password = "Passwort"
            });
        }

        private void LoadModels()
        {
            // Beispiel für das Laden von Modellen (hier mit Dummy-Daten)
            Models.Clear();
            Models.Add(new MockVaultEntryViewModel
            {
                Name = "Eintrag 1",
                UserName = "User1",
                Password = "Password1"
            });
            Models.Add(new MockVaultEntryViewModel
            {
                Name = "Eintrag 2",
                UserName = "User2",
                Password = "Password2"
            });
        }

        private void EditItem()
        {
            // Beispiel für das Bearbeiten eines Eintrags
            if (SelectedItem != null)
            {
                // Logik für die Bearbeitung, z.B. Update von SelectedItem
                SelectedItem.Name = "Bearbeiteter Name"; // Beispiel
                OnPropertyChanged(nameof(SelectedItem)); // Benachrichtige über die Änderung
            }
        }
        private void DeleteItem()
        {
            if (SelectedItem != null)
            {
                Models.Remove(SelectedItem); // Entfernt das ausgewählte Element
            }
        }
        #endregion

        /// <summary>
        /// Initializes the class (created by the generator).
        /// </summary>
        static MockVaultEntriesViewModel()
        {
            ClassConstructing();
            ClassConstructed();
        }
        /// <summary>
        /// This method is called before the construction of the class.
        /// </summary>
        static partial void ClassConstructing();
        /// <summary>
        /// This method is called when the class is constructed.
        /// </summary>
        static partial void ClassConstructed();

        /// <summary>
        /// This method is called the object is being constraucted.
        /// </summary>
        partial void Constructing();
        /// <summary>
        /// This method is called when the object is constructed.
        /// </summary>
        partial void Constructed();
    }
}